%\VignetteIndexEntry{biomaRt}
%\VignetteDepends{biomaRt}
%\VignetteKeywords{biomaRt}
%\VignettePackage{biomaRt}
%\documentclass[12pt, a4paper]{article}
\documentclass[12pt]{article}

\usepackage{amsmath,epsfig,psfig,pstricks,fullpage}
\usepackage{hyperref}
\usepackage{url}
\usepackage[authoryear,round]{natbib}

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}




\author{Steffen Durinck$^\ddagger$\footnote{Steffen.Durinck@esat.kuleuven.ac.be}, Wolfgang Huber$^\P$\footnote{huber@ebi.ac.uk},\\Yves Moreau$^\ddagger$, Bart De Moor$^\ddagger$}
\begin{document}
\title{Description of the biomaRt package}

\maketitle
\begin{center} $^\ddagger$Department of Electronical Engineering, ESAT-SCD, K.U.Leuven,\\ Kasteelpark Arenberg 10, 3001 Leuven-Heverlee, Belgium, \url{http://www.esat.kuleuven.ac.be/~dna/BioI}\\and $^\P$European Bioinformatics Institute, Hinxton, UK

 \end{center}

%library(tools)
%Rnwfile<- file.path("/home/steffen/programming/R/biomaRt/inst/doc/biomaRt.Rnw")
%Sweave(Rnwfile,pdf=TRUE,eps=TRUE,stylepath=TRUE,driver=RweaveLatex())

\tableofcontents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
The BioConductor \Rpackage{biomaRt} package enables to directly query databases based on biomaRt such as Ensembl, a software system which produces and maintains automatic annotation on metazoan genomes.  This way you can annotate the features on your array with the latest annotations starting from identifiers such as affy id's, locuslink, RefSeq and more. Annotation includes gene names, GO and OMIM annotation (depending on species).\\
\section{objects}

\subsection{Mart-class}

An object of the \Robject{Mart} class represents a connection to a BioMart.  And has the following slots:
\begin{itemize}
\item \Robject{connection}: stores the RMySQLConnection to a BioMart
\item \Robject{mart}: contains the name of the mart 
\end{itemize}


\subsection{martTable-class}
 
An object of the \Robject{martTable} class represents annotation of a gene.  And has the following slots:
\begin{itemize}
\item \Robject{id}: stores the id used for querying
\item \Robject{table}: is a list of lists (or vectors) storing annotation information
\end{itemize}



\subsection{Gene-class}
 
An object of the \Robject{Gene} class represents annotation of a gene.  And has the following slots:
\begin{itemize}
\item \Robject{id}: stores the id used for querying
\item \Robject{martID}: stores the mart specific id
\item \Robject{symbol}: stores the gene symbol
\item \Robject{chromosome}: stores the chromosome number on which the gene is locatlized
\item \Robject{band}: stores the band on which the gene is localized
\item \Robject{start}: stores the start position of the gene on the respective chromosome
\item \Robject{end}: stores the end position of the gene on the respective chromosome
\item \Robject{GO}: a slot to store an object of class GO
\item \Robject{OMIM}: a slot to store an object of class OMIM 	
\end{itemize}

\subsection{MultiGene-class}
 
When starting from a query id, Ensembl retrieves multiple hits, all these different hits can be storen in an object of the class \Robject{MultiGene}.  This class is identical to the \Robject{Gene} class except that here we store multiple elements in each slot, e.g. multiple symbols matching a query id.

\subsection{GO-class}

An object of the \Robject{GO} class represents GO annotation of a gene.  And has the following slots:
\begin{itemize}
\item \Robject{id}: stores the id used for querying
\item \Robject{GOID}: stores the GO id's associated with the query id.
\item \Robject{description}: stores the description of the corresponding GO id's 
\item \Robject{evidence}: stores the evidence code of GO annotation
\end{itemize}

\subsection{OMIM-class}

An object of the \Robject{OMIM} class represents OMIM annotation of a gene.  And has the following slots:
\begin{itemize}
\item \Robject{id}: stores the id used for querying
\item \Robject{OMIMID}: stores the OMIM id's associated with the query id.
\item \Robject{disease}: stores the description of the corresponding OMIM id's 
\end{itemize}


\section{Functions}
\subsection{\Rfunction{martConnect}}

A first step in using the biomaRt package is to connect to a BioMart database. The function martConnect establishes a connection with one of the following BioMart databases: snp, ensembl and vega.

Examples: \\	


<<>>=
## load up the library
library(biomaRt)

#Connect to a BioMart
mart <- martConnect("ensembl")
 
@

\subsection{\Rfunction{martDisconnect}}

You can only hold a limited number of connections with different BioMarts.  The function martDisconnect can be used to close a mart connection.

Examples: \\


<<>>=

#Disconnect from a BioMart

martDisconnect(mart)
 
@



\subsection{\Rfunction{getGene}}

The function \Rfunction{getGene} uses a query id to look up identification and chromosomal information of the corresponding gene.  Depending on the selected output, this function returns a \Robject{martTable} or an object of class \Robject{Gene}. When no information about the identifier is found in Ensembl, an empty \Robject{Gene}  object will be created.  If however multiple genes match a certain identifier, then an object of class \Robject{MultiGene} will be return containing information of all matches.
Currently the \Rfunction{getGene} function takes identifiers from locuslink, affy, RefSeq and embl.  Besides the id argument, this function also has a species, array and type argument.\\
The id argument is either a vector of identifiers or a single identifier to be annotated.\\
 The species argument should have the species from which the identifier comes as value. For the value of species, we use the full name of the species where separate words are separated by an underscore, e.g. 'gallusgallus'. A list of possible species to choose from can be obtained by executing the function \Rfunction{getSpecies}.\\ 
The array argument takes affy array identifiers as values.  A list of possible identifiers supported by the package can be obtained by executing the function \Rfunction{getAffyArrays}.\\The mart argument is a mart connection, which was obtained using the method \Rfunction{martConnect}\\
The type takes the values of 'locuslink','refseq' and 'embl' to clarify which type of identifier is specified in the id argument.\\
The output can be changed using the output argument.  One can choose between a martTable (default) and an output of Gene/Multi-Gene objects.
Depending on the identifier, different additional arguments will have to be given, summarized below:
\begin{itemize}
\item Affy id's: id, array, mart
\item Locuslink: id, type, species, mart  
\item RefSeq: id, type, species, mart
\item embl: id, type, species, mart
\end{itemize}

Examples: \\


<<>>=
## load up the library
library(biomaRt)

#connect to ensembl

mart <- martConnect("ensembl") 

#example affy

getGene(id = "1939_at", array = "hgu95av2", mart = mart)

#example locuslink

getGene(id = 672, type = "locuslink", species = "homo_sapiens", mart = mart)
@

\subsection{\Rfunction{getGO}}

The function \Rfunction{getGO} uses a query id to look up GO annotation of the corresponding gene.  It return an object of class \Robject{GO}. When no information about the identifier is found in Ensembl, an empty \Robject{GO}  object will be created.
Currently the \Rfunction{getGO} function takes identifiers from locuslink, affy, RefSeq and embl.  Besides the id argument, this function also has a species, array and type argument.\\
The id argument is either a vector of identifiers or a single identifier to be annotated.\\
 The species argument should have the species from which the identifier comes as value.  A list of possible species to choose from can be obtained by executing the function \Rfunction{getSpecies}.\\ 
The array argument takes affy array identifiers as values.  A list of possible identifiers supported by the package can be obtained by executing the function \Rfunction{getAffyArrays}.\\ The mart argument is a mart connection, which was obtained using the method \Rfunction{martConnect}\\
A last argument of this function is the type argument which, takes the values of 'locuslink','refseq' and 'embl' to clarify which type of identifier is specified in the id argument.\\
Depending on the identifier, different additional arguments will have to be given, summarized below:
\begin{itemize}
\item Affy id's: id, array, mart
\item Locuslink: id, type, species, mart  
\item RefSeq: id, type, species, mart
\item embl: id, type, species, mart
\end{itemize}

Examples: \\

<<>>=

#example affy

getGO(id = "1939_at", array = "hgu95av2", mart = mart)

#example locuslink

getGO(id = 672, type = "locuslink", species = "homo_sapiens", mart = mart)
@

\subsection{\Rfunction{getOMIM}}

The function \Rfunction{getOMIM} uses a query id to look up OMIM annotation of the corresponding gene.  It return an object of class \Robject{OMIM}. When no information about the identifier is found in Ensembl, an empty \Robject{OMIM}  object will be created.
Currently the \Rfunction{getOMIM} function takes identifiers from locuslink, affy, RefSeq and embl.  Besides the id argument, this function also has an array ,type and mart argument.\\
The id argument is either a vector of identifiers or a single identifier to be annotated.\\
The array argument takes affy array identifiers as values.  A list of possible identifiers supported by the package can be obtained by executing the function \Rfunction{getAffyArrays}.\\
The type argument takes the values of 'locuslink','refseq' and 'embl' to clarify which type of identifier is specified in the id argument. If the argumant array is used then biomaRt knows the identifiers given corresponf to affy id's.  The mart argument is a mart connection, which was obtained using the method \Rfunction{martConnect}\\
Depending on the identifier, different additional arguments will have to be given, summarized below:
\begin{itemize}
\item Affy id's: id, array, mart 
\item Locuslink: id, type, mart  
\item RefSeq: id, type, mart
\item embl: id, type, mart
\end{itemize}

Examples: \\


<<>>=

#example affy

getOMIM(id = "1939_at", array = "hgu95av2", mart = mart)

#example locuslink

getOMIM(id = 672, type = "locuslink", mart = mart)
@



\subsection{\Rfunction{getFeature}}

The function \Rfunction{getFeature} looks up affy identifiers on a given affy array which correspond to a given symbol. As output this function returns a \Robject{martTable}.
Currently the \Rfunction{getFeature} function takes identifiers from affy only.  Besides the symbol argument, this function also has array and mart argument.\\ The mart argument is a mart connection, which was obtained using the method \Rfunction{martConnect}\\
A last argument of this function is the type argument which, takes the values of 'affy', 'locuslink','refseq' and 'embl' to clarify which type of identifier is specified in the id argument.\\


Examples: \\


<<>>=

#find all probes on the hgu95av2 array which have something to do with P53

getFeature(symbol = "P53", array = "hgu95av2", mart = mart)

@


\subsection{\Rfunction{getSpecies}}

The function \Rfunction{getSpecies} looks up which species are present in the BioMart.  This function currently works only for ensembl.


Examples: \\


<<>>=


getSpecies( mart )

@



\subsection{\Rfunction{getAffyArrays}}

The function \Rfunction{getAffyArrays} retrieves the Affymetrix array identifiers which are present in ensembl and which can be queried using the biomaRt package.


Examples: \\


<<>>=


getAffyArrays( )

@


\end{document}
